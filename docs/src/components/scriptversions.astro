---
import fs from "node:fs/promises";

type Props = {
	// Render mode: "sentence" returns a ready-to-use sentence; "values" just returns versions.
	mode?: "sentence" | "values";
};

const { mode = "sentence" } = Astro.props as Props;

async function readVersion(relPath: string): Promise<string> {
	try {
		// Build a file URL relative to this component's location
		const url = new URL(relPath, import.meta.url);
		const content = await fs.readFile(url, "utf8");
		const match = content.match(/script_version=\"([^\"]*)\"/);
		return match?.[1] ?? "unknown";
	} catch {
		return "unknown";
	}
}

// Scripts live at the repository root; this component is at docs/src/components/
// So we traverse up three directories to reach the repo root.
const bashVersion = await readVersion("../../../qbt-nox-static.bash");
const shVersion = await readVersion("../../../qbittorrent-nox-static.sh");
---

{
	mode === "values" ? (
		// Expose just the values when needed
		<span data-qbt-bash-version={bashVersion} data-qbt-sh-version={shVersion} />
	) : (
		<>
			<code>qbt-nox-static.bash™</code> is <code>v{bashVersion}</code> and{" "}
			<code>qbittorrent-nox-static.sh™</code> is <code>v{shVersion}</code>
		</>
	)
}
