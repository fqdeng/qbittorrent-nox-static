---
const response = await fetch(
	"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json",
);

const data = await response.json();

const rows = [
	{
		variable: "qbt_zlib_type",
		defaultVal: "zlib",
		optionsTokens: ["zlib", "zlib-ng"],
		example: 'qbt_zlib_type="zlib"',
	},
	{
		variable: "qbt_skip_icu",
		defaultVal: "yes",
		optionsTokens: ["yes", "no"],
		example: 'qbt_skip_icu="yes"',
	},
	{
		variable: "qbt_boost_tag",
		defaultVal: `boost-${data.boost || "1.88.0"}`,
		optionsTokens: ["Any valid git tag"],
		example: 'qbt_boost_tag="boost-1.86.0"',
	},
	{
		variable: "qbt_libtorrent_version",
		defaultVal: "2.0",
		optionsTokens: ["1.2", "2.0"],
		example: 'qbt_libtorrent_version="2.0"',
	},
	{
		variable: "qbt_libtorrent_tag",
		defaultVal: `v${data.libtorrent_2_0 || "2.0.11"}`,
		optionsTokens: ["Any valid git tag"],
		example: 'qbt_libtorrent_tag="v2.0.10"',
	},
	{
		variable: "qbt_libtorrent_master_jamfile",
		defaultVal: "no",
		optionsTokens: ["yes", "no"],
		example: 'qbt_libtorrent_master_jamfile="no"',
	},
	{
		variable: "qbt_qt_version",
		defaultVal: "6",
		optionsTokens: ["5.12", "5.15", "6.3", "6.3.1"],
		example: 'qbt_qt_version="6"',
	},
	{
		variable: "qbt_qt_tag",
		defaultVal: `v${data.qt6 || "v6.9.1"}`,
		optionsTokens: ["Any valid git tag"],
		example: 'qbt_qt_tag="v6.8.0"',
	},
	{
		variable: "qbt_qbittorrent_tag",
		defaultVal: `release-${data.qbittorrent || "5.1.2"}`,
		optionsTokens: ["Any valid git tag"],
		example: 'qbt_qbittorrent_tag="release-5.1.2"',
	},
	{
		variable: "qbt_build_dir",
		defaultVal: "qbt-build",
		optionsTokens: ["qbt-build"],
		example: 'qbt_build_dir="~/custom"',
	},
	{
		variable: "qbt_build_tool",
		defaultVal: "cmake",
		optionsTokens: ["cmake", "qmake"],
		example: 'qbt_build_tool="cmake"',
	},
	{
		variable: "qbt_cross_name",
		defaultVal: "default (default to OS gcc)",
		optionsTokens: ["See Cross arch options below"],
		example: 'qbt_cross_name="aarch64"',
	},
	{
		variable: "qbt_mcm_url",
		defaultVal: "userdocs/qbt-musl-cross-make",
		optionsTokens: [],
		example: 'qbt_mcm_url="userdocs/qbt-musl-cross-make"',
	},
	{
		variable: "qbt_patches_url",
		defaultVal: "userdocs/qbittorrent-nox-static",
		optionsTokens: [],
		example: 'qbt_patches_url="userdocs/qbittorrent-nox-static"',
	},
	{
		variable: "qbt_workflow_files",
		defaultVal: "no",
		optionsTokens: ["yes", "no"],
		example: 'qbt_workflow_files="no"',
	},
	{
		variable: "qbt_cache_dir",
		defaultVal: "empty = unset",
		optionsTokens: [],
		example: 'qbt_cache_dir="cache"',
	},
	{
		variable: "qbt_optimise_strip",
		defaultVal: "yes",
		optionsTokens: ["yes", "no"],
		example: 'qbt_optimise_strip="yes"',
	},
	{
		variable: "qbt_build_debug",
		defaultVal: "no",
		optionsTokens: [],
		example: 'qbt_build_debug="no"',
	},
	{
		variable: "qbt_standard",
		defaultVal: "20",
		optionsTokens: ["14", "17", "20", "23"],
		example: 'qbt_standard="20"',
	},
	{
		variable: "qbt_static_ish",
		defaultVal: "no",
		optionsTokens: [],
		example: 'qbt_static_ish="no"',
	},
	{
		variable: "qbt_optimise",
		defaultVal: "no",
		optionsTokens: ["yes", "no"],
		example: 'qbt_optimise="yes"',
	},
	{
		variable: "qbt_with_qemu",
		defaultVal: "yes",
		optionsTokens: ["yes", "no"],
		example: 'qbt_with_qemu="yes"',
	},
	{
		variable: "qbt_host_deps_repo",
		defaultVal: "userdocs/qbt-host-deps",
		optionsTokens: [],
		example: "qbt_host_deps_repo=userdocs/qbt-host-deps",
	},
];
---

<table>
	<thead>
		<tr>
			<th>Build variable</th>
			<th>Default if unset</th>
			<th>Options</th>
			<th>example usage</th>
		</tr>
	</thead>
	<tbody>
		{
			rows.map((r) => (
				<tr>
					<td>
						<code>{r.variable}</code>
					</td>
					<td>
						<code>{r.defaultVal}</code>
					</td>
					<td>
						{Array.isArray(r.optionsTokens) && r.optionsTokens.length
							? r.optionsTokens.map((opt, i) => (
									<Fragment>
										<code>{opt}</code>
										{i < r.optionsTokens.length - 1 ? " " : ""}
									</Fragment>
								))
							: ""}
					</td>
					<td>
						<code>{r.example}</code>
					</td>
				</tr>
			))
		}
	</tbody>
</table>
